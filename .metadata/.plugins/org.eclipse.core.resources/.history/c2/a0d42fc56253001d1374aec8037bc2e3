package Talk1;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.Vector;

import ch14.ChatMgr3;
import ch14.ChatProtocol3;

public class TalkServer {
	
	ServerSocket server;
	int port = 8006;
	Vector<ClientThread1> vc;
	
	
	public TalkServer() {
		try {
			server = new ServerSocket(port);
			vc = new Vector<TalkServer.ClientThread1>();
			
		} catch (Exception e) {
			e.printStackTrace();
			System.out.println("Error in Server");
			System.out.println(1);//비정상적인 종료
		}
		System.out.println("*TalkServer****************");
		System.out.println("*Client 접속을 기다리고 있습니다.*");
		System.out.println("***************************");
		try {
			while(true) {
				Socket sock = server.accept();
				ClientThread1 ct = new ClientThread1(sock);
				ct.start();
				vc.addElement(ct);
			}
		} catch (Exception e) {
			System.out.println("Error in sock");
			e.printStackTrace();
		}
	}
	
	//모든 접속된 Client에게 메세지 전달
	public void sendAllMessage(String msg) {
		for(int i=0; i<vc.size(); i++) {
			//Vector에 저장된 ClientThread를 순차적으로 가져옴
			ClientThread1 ct = vc.get(i);
			//ClientThread 가지고 있는 각각의 메세지 보내는 메소드 호출
			ct.sendMessage(msg);
		}
	}
	
	//접속이 끊어진 clientThread는 벡터에서 제거
	public void removeClinet(ClientThread1 ct) {
		vc.remove(ct);
	}
	
	public String getIds() {
		String ids = "";
		for(int i=0; i < vc.size(); i++) {
			ClientThread1 ct = vc.get(i);
			ids += ct.id+";";
		}
		return ids;
	}
	
	public ClientThread1 findClient(String id) {
		ClientThread1 ct = null;
		for(int i=0; i<vc.size(); i++) {
			ct = vc.get(i);
			if(id.equals(ct.id)) {
				break;
			}
		}
		return ct;
	}
	
	
	
	
	class ClientThread1 extends Thread {
		
		Socket sock;
		BufferedReader in;
		PrintWriter out;
		String id;
		
		public ClientThread1(Socket sock) {
			try {
				this.sock=sock;
				in = new BufferedReader(
					new InputStreamReader(sock.getInputStream()));
				out = new PrintWriter(sock.getOutputStream(), true);
				System.out.println(sock + "접속됨....");
			}catch(Exception e) {
				e.printStackTrace();
			}
		}
		
		@Override
		public void run() {
			try {
				//Client가 처음으로 받는 메세지
				out.println("사용하실 아이디를 입력해주세요.");
				id=in.readLine();
				//모든 사용자들에게 접속한 사람의 welcome 메세지 전달
				sendAllMessage("[" + id + "]님이 입장하였습니다.");
				String line = "";
				while(true) {
					line = in.readLine();
					if(line==null)
						break;
					sendAllMessage("[" + id + "]" + line);
				}// -- while
				in.close();
				out.close();
				sock.close();
				removeClinet(this);
			} catch (Exception e) {
				removeClinet(this);
				System.err.println(sock + "끊어짐...");
			}
		}
		
		

		
//	Client에게 메세지 전달 메소드
		public void sendMessage(String msg) {
			out.println(msg);
		}
	}
		
	public static void main(String[] args) {
		new TalkServer();
	}
	
	}
